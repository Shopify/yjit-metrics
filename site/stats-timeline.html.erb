---
layout: timeline
show_overall: true
subtitle: YJIT Stats Over Time
timeline_type: yjit_stats
---

<script>
function updateChartCallback({svg, x, y}) {
    svg
        .selectAll(".centerdot.circle")
        .transition().duration(timeline.transitionDuration)
        .attr("cx", function(d) { return x(d.time) } )
        .attr("cy", function(d) { return y(d[document.timeline_data.current_stat]) } )

    svg
        .selectAll(".line")
        .transition().duration(timeline.transitionDuration)
        .attr("d", d3.line()
            .x(function(d) { return x(d.time) })
            .y(function(d) { return y(d[document.timeline_data.current_stat]) })
        );
}

var updateDomainsAndAxesFromData = buildUpdateDomainsAndAxesFromData(function(series){
  var current = document.timeline_data.current_stat;
  return (series.value_range ||= {})[current] ||= getMinMax(series.data.map(d => d[current]));
});

    // Using JS values like data_series, update the SVG graph data
function updateGraphFromData() {
    updateDomainsAndAxesFromData();
    var x = document.timeline_data.x_axis_function;
    var y = document.timeline_data.y_axis_function;

    // Add top-level SVG groups for data series
    svg.selectAll("g.svg_tl_data")
        .data(data_series, (item) => item.name)
        .join("g")
            .attr("class", d => "svg_tl_data " + d.name + " benchmark-" + d.benchmark)
            .attr("visibility", d => d.visible ? "visible" : "hidden")
            ;

    addEventAnnotations({svg, x, y});

    data_series.forEach(function(item) {
      var current_stat = document.timeline_data.current_stat;
      var data = item.data.filter(x => x[current_stat] != null);
      var group = svg.select("svg g.svg_tl_data." + item.name);

      // Add the graph line
      group.selectAll("path")
        .data([data])
        .join("path")
        .attr("class", "line")
        .attr("fill", "none")
        .attr("stroke", item.color)
        .attr("stroke-width", 1.5)
        .attr("d",
          d3.line()
            .x(function(d) { return x(d.time) })
            .y(function(d) { return y(d[current_stat]) })
        ).attr("clip-path", "url(#clip)");

        // Add a circle at each datapoint
        group.selectAll("circle.centerdot." + item.name)
          .data(data, (d) => d.time).join("circle")
          .attr("class", "circle centerdot " + item.name)
          .attr("fill", item.color)
          .attr("r", 1.5)
          .attr("cx", function(d) { return x(d.time) } )
          .attr("cy", function(d) { return y(d[current_stat]) } )
          .attr("data-tooltip", function(d) {
              return item.benchmark + " at " + timePrinter(d.time) + ": " +
                  (d[current_stat]).toFixed(1) +
                  "<br/>" + item.platform + " Ruby " + d.ruby_desc;
          })
          .attr("clip-path", "url(#clip)");
        });
    }

// Handle legend, checkboxes and stats dropdown
var stats_select = document.getElementById("stat_field_dropdown_select");

stats_select.addEventListener("change", function () {
  // Set up new timeline_data.current_stat
  document.timeline_data.current_stat = stats_select.value;
  console.log("Setting current stat to", document.timeline_data.current_stat);

  setHashParamFromCheckboxes(); // new current_stat goes into the hashparam
  updateGraphFromData();
});

setupTimeline({
  setCheckboxesFromHashParamCallback: function (benchmarks) {
    document.timeline_data.current_stat = benchmarks.shift();
    stats_select.value = document.timeline_data.current_stat;
  },
  timelineType: <%= timeline_type.inspect %>
});

</script>
