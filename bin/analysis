#!/usr/bin/env ruby

require "optparse"
require "yaml"

require_relative "../lib/yjit_metrics"

options = {
  count: 30,
}
args = OptionParser.new do |opts|
  opts.on("--benchmarks NAMES", "Limit to specified benchmarks (comma separated)")
  opts.on("--before DATE", "Limit to results before XXXX-XX-XX")
  opts.on("--count NUM", "Number of results to load and compare (default 30)")
  opts.on("--regression", "Only show benchmarks that have regressed")
  opts.on("--spacious", "Include more spacing")
  opts.on("--notify", "Send slack notification with regression info")
end.parse!(into: options)

first = true
report = YJITMetrics::Analysis.report_from_dir(args[0], benchmarks: options[:benchmarks]&.split(","), count: options[:count].to_i, before: options[:before])
report.results.each_pair do |metric, h|
  h.sort.each do |platform, values|

    # Put blank line between sections.
    puts unless first
    first = false

    # Heading for each metric/platform.
    puts "#{metric} #{platform}"

    # Determine max width base on benchmark name.
    len = values.keys.map(&:size).max

    values.sort.each do |b, report|
      # Skip if regression-only view was requested and this benchmark doesn't report one.
      next if options[:regression] && !report[:regression]

      # Blank line between benchmarks if requested.
      puts if options[:spacious]

      # Print a line for each item in the analysis (regression, streaks, etc).
      report.each.with_index do |(k,v), i|
        prefix = ""

        # If this is the first item for this benchmark...
        if i.zero?
          # Show benchmark name on separate line.
          if options[:spacious]
            printf " %*s\n", len, b
          else
            # Show benchmark at beginning of first line.
            prefix = b if i.zero?
          end
        end

        printf " %*s %s: %s\n", len, prefix, k, v
      end
    end
  end
end

if options[:notify]
  report.regression_notification&.then do |msg|
    YJITMetrics::Notifier.new(title: "Regressions", body: msg).notify!
  end
end
